define(["require", "exports", './Observable', './operators/combineLatest-static', './operators/concat-static', './operators/merge-static', './observables/DeferObservable', './observables/EmptyObservable', './observables/ForkJoinObservable', './observables/FromObservable', './observables/ArrayObservable', './observables/FromEventObservable', './observables/FromEventPatternObservable', './observables/PromiseObservable', './observables/IntervalObservable', './observables/InfiniteObservable', './observables/RangeObservable', './observables/ErrorObservable', './observables/TimerObservable', './operators/zip-static', './operators/buffer', './operators/bufferCount', './operators/bufferTime', './operators/bufferToggle', './operators/bufferWhen', './operators/catch', './operators/combineAll', './operators/combineLatest', './operators/concat', './operators/concatAll', './operators/concatMap', './operators/concatMapTo', './operators/count', './operators/dematerialize', './operators/debounce', './operators/debounceTime', './operators/defaultIfEmpty', './operators/delay', './operators/distinctUntilChanged', './operators/do', './operators/expand', './operators/filter', './operators/finally', './operators/first', './operators/groupBy', './operators/ignoreElements', './operators/every', './operators/last', './operators/map', './operators/mapTo', './operators/materialize', './operators/merge', './operators/mergeAll', './operators/mergeMap', './operators/mergeMapTo', './operators/multicast', './operators/observeOn', './operators/partition', './operators/publish', './operators/publishBehavior', './operators/publishReplay', './operators/reduce', './operators/repeat', './operators/retry', './operators/retryWhen', './operators/sample', './operators/sampleTime', './operators/scan', './operators/share', './operators/single', './operators/skip', './operators/skipUntil', './operators/startWith', './operators/subscribeOn', './operators/switch', './operators/switchMap', './operators/switchMapTo', './operators/take', './operators/takeUntil', './operators/throttle', './operators/timeout', './operators/timeoutWith', './operators/toArray', './operators/toPromise', './operators/window', './operators/windowCount', './operators/windowTime', './operators/windowToggle', './operators/windowWhen', './operators/withLatestFrom', './operators/zip', './operators/zipAll', './Subject', './Subscription', './Subscriber', './subjects/ReplaySubject', './subjects/BehaviorSubject', './observables/ConnectableObservable', './Notification', './util/EmptyError', './util/ArgumentOutOfRangeError', './schedulers/nextTick', './schedulers/immediate'], function (require, exports, Observable_1, combineLatest_static_1, concat_static_1, merge_static_1, DeferObservable_1, EmptyObservable_1, ForkJoinObservable_1, FromObservable_1, ArrayObservable_1, FromEventObservable_1, FromEventPatternObservable_1, PromiseObservable_1, IntervalObservable_1, InfiniteObservable_1, RangeObservable_1, ErrorObservable_1, TimerObservable_1, zip_static_1, buffer_1, bufferCount_1, bufferTime_1, bufferToggle_1, bufferWhen_1, catch_1, combineAll_1, combineLatest_1, concat_1, concatAll_1, concatMap_1, concatMapTo_1, count_1, dematerialize_1, debounce_1, debounceTime_1, defaultIfEmpty_1, delay_1, distinctUntilChanged_1, do_1, expand_1, filter_1, finally_1, first_1, groupBy_1, ignoreElements_1, every_1, last_1, map_1, mapTo_1, materialize_1, merge_1, mergeAll_1, mergeMap_1, mergeMapTo_1, multicast_1, observeOn_1, partition_1, publish_1, publishBehavior_1, publishReplay_1, reduce_1, repeat_1, retry_1, retryWhen_1, sample_1, sampleTime_1, scan_1, share_1, single_1, skip_1, skipUntil_1, startWith_1, subscribeOn_1, switch_1, switchMap_1, switchMapTo_1, take_1, takeUntil_1, throttle_1, timeout_1, timeoutWith_1, toArray_1, toPromise_1, window_1, windowCount_1, windowTime_1, windowToggle_1, windowWhen_1, withLatestFrom_1, zip_1, zipAll_1, Subject_1, Subscription_1, Subscriber_1, ReplaySubject_1, BehaviorSubject_1, ConnectableObservable_1, Notification_1, EmptyError_1, ArgumentOutOfRangeError_1, nextTick_1, immediate_1) {
    exports.Observable = Observable_1.Observable;
    Observable_1.Observable.combineLatest = combineLatest_static_1.combineLatest;
    Observable_1.Observable.concat = concat_static_1.concat;
    Observable_1.Observable.merge = merge_static_1.merge;
    Observable_1.Observable.defer = DeferObservable_1.DeferObservable.create;
    Observable_1.Observable.empty = EmptyObservable_1.EmptyObservable.create;
    Observable_1.Observable.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
    Observable_1.Observable.from = FromObservable_1.FromObservable.create;
    Observable_1.Observable.fromArray = ArrayObservable_1.ArrayObservable.create;
    Observable_1.Observable.fromEvent = FromEventObservable_1.FromEventObservable.create;
    Observable_1.Observable.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
    Observable_1.Observable.fromPromise = PromiseObservable_1.PromiseObservable.create;
    Observable_1.Observable.interval = IntervalObservable_1.IntervalObservable.create;
    Observable_1.Observable.never = InfiniteObservable_1.InfiniteObservable.create;
    Observable_1.Observable.of = ArrayObservable_1.ArrayObservable.of;
    Observable_1.Observable.range = RangeObservable_1.RangeObservable.create;
    Observable_1.Observable.throw = ErrorObservable_1.ErrorObservable.create;
    Observable_1.Observable.timer = TimerObservable_1.TimerObservable.create;
    Observable_1.Observable.zip = zip_static_1.zip;
    var observableProto = Observable_1.Observable.prototype;
    observableProto.buffer = buffer_1.buffer;
    observableProto.bufferCount = bufferCount_1.bufferCount;
    observableProto.bufferTime = bufferTime_1.bufferTime;
    observableProto.bufferToggle = bufferToggle_1.bufferToggle;
    observableProto.bufferWhen = bufferWhen_1.bufferWhen;
    observableProto.catch = catch_1._catch;
    observableProto.combineAll = combineAll_1.combineAll;
    observableProto.combineLatest = combineLatest_1.combineLatest;
    observableProto.concat = concat_1.concat;
    observableProto.concatAll = concatAll_1.concatAll;
    observableProto.concatMap = concatMap_1.concatMap;
    observableProto.concatMapTo = concatMapTo_1.concatMapTo;
    observableProto.count = count_1.count;
    observableProto.dematerialize = dematerialize_1.dematerialize;
    observableProto.debounce = debounce_1.debounce;
    observableProto.debounceTime = debounceTime_1.debounceTime;
    observableProto.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
    observableProto.delay = delay_1.delay;
    observableProto.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
    observableProto.do = do_1._do;
    observableProto.expand = expand_1.expand;
    observableProto.filter = filter_1.filter;
    observableProto.finally = finally_1._finally;
    observableProto.first = first_1.first;
    observableProto.groupBy = groupBy_1.groupBy;
    observableProto.ignoreElements = ignoreElements_1.ignoreElements;
    observableProto.every = every_1.every;
    observableProto.last = last_1.last;
    observableProto.map = map_1.map;
    observableProto.mapTo = mapTo_1.mapTo;
    observableProto.materialize = materialize_1.materialize;
    observableProto.merge = merge_1.merge;
    observableProto.mergeAll = mergeAll_1.mergeAll;
    observableProto.mergeMap = mergeMap_1.mergeMap;
    observableProto.flatMap = mergeMap_1.mergeMap;
    observableProto.mergeMapTo = mergeMapTo_1.mergeMapTo;
    observableProto.flatMapTo = mergeMapTo_1.mergeMapTo;
    observableProto.multicast = multicast_1.multicast;
    observableProto.observeOn = observeOn_1.observeOn;
    observableProto.partition = partition_1.partition;
    observableProto.publish = publish_1.publish;
    observableProto.publishBehavior = publishBehavior_1.publishBehavior;
    observableProto.publishReplay = publishReplay_1.publishReplay;
    observableProto.reduce = reduce_1.reduce;
    observableProto.repeat = repeat_1.repeat;
    observableProto.retry = retry_1.retry;
    observableProto.retryWhen = retryWhen_1.retryWhen;
    observableProto.sample = sample_1.sample;
    observableProto.sampleTime = sampleTime_1.sampleTime;
    observableProto.scan = scan_1.scan;
    observableProto.share = share_1.share;
    observableProto.single = single_1.single;
    observableProto.skip = skip_1.skip;
    observableProto.skipUntil = skipUntil_1.skipUntil;
    observableProto.startWith = startWith_1.startWith;
    observableProto.subscribeOn = subscribeOn_1.subscribeOn;
    observableProto.switch = switch_1._switch;
    observableProto.switchMap = switchMap_1.switchMap;
    observableProto.switchMapTo = switchMapTo_1.switchMapTo;
    observableProto.take = take_1.take;
    observableProto.takeUntil = takeUntil_1.takeUntil;
    observableProto.throttle = throttle_1.throttle;
    observableProto.timeout = timeout_1.timeout;
    observableProto.timeoutWith = timeoutWith_1.timeoutWith;
    observableProto.toArray = toArray_1.toArray;
    observableProto.toPromise = toPromise_1.toPromise;
    observableProto.window = window_1.window;
    observableProto.windowCount = windowCount_1.windowCount;
    observableProto.windowTime = windowTime_1.windowTime;
    observableProto.windowToggle = windowToggle_1.windowToggle;
    observableProto.windowWhen = windowWhen_1.windowWhen;
    observableProto.withLatestFrom = withLatestFrom_1.withLatestFrom;
    observableProto.zip = zip_1.zipProto;
    observableProto.zipAll = zipAll_1.zipAll;
    exports.Subject = Subject_1.Subject;
    exports.Subscription = Subscription_1.Subscription;
    exports.Subscriber = Subscriber_1.Subscriber;
    exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
    exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
    exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
    exports.Notification = Notification_1.Notification;
    exports.EmptyError = EmptyError_1.EmptyError;
    exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
    /* tslint:enable:no-unused-variable */
    /* tslint:disable:no-var-keyword */
    var Scheduler = {
        nextTick: nextTick_1.nextTick,
        immediate: immediate_1.immediate
    };
    exports.Scheduler = Scheduler;
    /* tslint:enable:no-var-keyword */
});
//# sourceMappingURL=Rx.js.map